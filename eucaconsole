#!/usr/bin/python -tt
__requires__ = 'pyramid==1.4'
import sys
sys.path.insert(0, '/usr/lib/python2.6/site-packages/zope.interface-4.0.4-py2.6-linux-x86_64.egg/')
sys.path.insert(0, '/usr/lib/python2.6/site-packages/Beaker-1.5.4-py2.6.egg/')
from pkg_resources import load_entry_point


# EUCA-5030 is solved by clearning this environment variable immediately.
# this prevents boto from printing a warning if this env variable isn't set to a valid path
import os
if 'AWS_CREDENTIAL_FILE' in os.environ:
    del os.environ['AWS_CREDENTIAL_FILE']

import atexit
import fcntl
import getopt
import logging
import signal
import time

pid_file = "/var/run/eucaconsole.pid"
config_file = "/etc/eucaconsole/console.ini"

procid = 0

def daemonize(func=None):
    # Fork process
    procid = os.fork()
    if procid < 0:
        sys.exit(1)
    elif procid > 0:
        sys.exit(0)
    procid = os.setsid()
    if procid == -1:
        sys.exit(1)

    # Close open file descriptors
    for fd in (0, 1, 2):
        try:
            os.close(fd)
        except OSError:
            pass

    print("about to point fds to null")
    # Point descriptors to /dev/null
    os.open("/dev/null", os.O_RDWR)
    os.dup(0)
    os.dup(0)

    os.umask(027)
    os.chdir("/")

    # Create pidfile
    try:
        f = open(pid_file, "w")
        fcntl.lockf(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
        f.write(str(os.getpid()))
        f.flush()
    except IOError:
        sys.exit(1)

    signal.signal(signal.SIGTERM, cleanpid)
    atexit.register(cleanpid)

    if func:
        func()


def cleanpid(signum=None, action=None):
    if os.getpgid(procid) == 1:
        os.remove(pid_file)
        sys.exit(0)


def start_console():
    args = ['pserve', config_file]
    sys.exit(
        load_entry_point('pyramid==1.4', 'console_scripts', 'pserve')(args)
    )


def usage():
    print """
    %s [-d | --daemonize] [-c <config file> | --config <config file>] [-p <pid file> | --pidfile <pid file>]

    """ % (os.path.basename(sys.argv[0]))
    sys.exit(1)


if __name__ == "__main__":

    daemon = False
    try:
        opts, _ = getopt.getopt(sys.argv[1:],
            "hdc:p:", ["help", "daemonize", "config=", "pidfile="])
        for arg, value in opts:
            if arg == "-d" or arg == "--daemonize":
                daemon = True
            elif arg == "-p" or arg == "--pidfile":
                pid_file = value
            elif arg == "-c" or arg == "--config":
                config_file = value
            elif arg == "-h" or arg == "--help":
                usage()
    except getopt.GetoptError:
        usage()

    if daemon:
        daemonize(start_console)
    else:
        try:
            logging.info("Starting Eucalyptus Console")
            start_console()
        except KeyboardInterrupt:
            logging.info("Interrupted By User")
            sys.exit(0)

